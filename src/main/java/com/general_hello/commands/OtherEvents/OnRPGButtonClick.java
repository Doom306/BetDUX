package com.general_hello.commands.OtherEvents;

import com.general_hello.commands.Bot;
import com.general_hello.commands.Database.DatabaseManager;
import com.general_hello.commands.RPG.Commands.InventoryCommand;
import com.general_hello.commands.RPG.Commands.ShopCommand;
import com.general_hello.commands.RPG.Objects.RPGEmojis;
import com.general_hello.commands.RPG.RpgUser.RPGDataUtils;
import com.general_hello.commands.RPG.RpgUser.RPGUser;
import com.general_hello.commands.commands.Marriage.MarriageCommand;
import com.general_hello.commands.commands.Marriage.MarriageData;
import com.general_hello.commands.commands.Utils.UtilNum;
import com.general_hello.commands.commands.Work.WorkCommand;
import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.entities.Emoji;
import net.dv8tion.jda.api.entities.User;
import net.dv8tion.jda.api.events.interaction.ButtonClickEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.components.Button;
import net.dv8tion.jda.api.interactions.components.ButtonStyle;
import org.jetbrains.annotations.NotNull;

import java.awt.*;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Objects;

public class OnRPGButtonClick extends ListenerAdapter {
    @Override
    public void onButtonClick(@NotNull ButtonClickEvent event) {
        // users can spoof this id so be careful what you do with this
        String[] id = event.getComponentId().split(":"); // this is the custom id we specified in our button
        String authorId = id[0];

        if (id.length == 1) {
            return;
        }

        String type = id[1];
        // When storing state like this is it is highly recommended to do some kind of verification that it was generated by you, for instance a signature or local cache

        if (!authorId.equals("0000") && !authorId.equals(event.getUser().getId())) {
            event.reply("You can't press this!!!").setEphemeral(true).queue();
            return;
        }

        User author = event.getUser();

        switch (type) {
            case "color":
                if (Objects.equals(id[2], "correct")) {
                    int minRobOrFine = 100_000;
                    int maxRobOrFine = 500_000;

                    int randomNum = UtilNum.randomNum(minRobOrFine, maxRobOrFine);

                    DecimalFormat formatter = new DecimalFormat("#,###.00");
                    DatabaseManager.INSTANCE.setCredits(event.getUser().getIdLong(), randomNum);

                    EmbedBuilder e = new EmbedBuilder();
                    e.setTitle("Great Work!");
                    e.setColor(Color.green);
                    e.setDescription("You were given " + RPGEmojis.credits + " `" + formatter.format(randomNum) + "` for an hour of work.");
                    e.setFooter("Working as a observer");
                    event.getHook().deleteOriginal().queue();
                    event.deferEdit().queue();
                    event.getChannel().sendMessageEmbeds(e.build()).setActionRow(Button.success("1234:IGNORE", event.getButton().getLabel()).asDisabled()).queue();
                } else {
                    int minRobOrFine = 0;
                    int maxRobOrFine = 100_000;

                    int randomNum = UtilNum.randomNum(minRobOrFine, maxRobOrFine);

                    DecimalFormat formatter = new DecimalFormat("#,###.00");
                    DatabaseManager.INSTANCE.setCredits(event.getUser().getIdLong(), randomNum);

                    EmbedBuilder e = new EmbedBuilder();
                    e.setTitle("TERRIBLE Work!");
                    e.setColor(Color.red);
                    e.setDescription("You lost the mini-game because the answer you chose wasn't correct.\n" +
                            "You were given " + RPGEmojis.credits + " `" + formatter.format(randomNum) + "` for a sub-par hour of work.");
                    e.setFooter("Working as a observer");
                    event.getHook().deleteOriginal().queue();
                    event.deferEdit().queue();
                    event.getChannel().sendMessageEmbeds(e.build()).setActionRow(Button.danger("1234:IGNORE", event.getButton().getLabel()).asDisabled()).queue();
                }
                try {
                    WorkCommand.job.remove(event.getUser());
                } catch(Exception ignored) {}
                break;
            case "start":
                //some other code
                event.getHook().editOriginal("Successfully started your journey! Good luck soldier!").setActionRow(
                        Button.primary("1234:BEGUN", "Journey has started").asDisabled()
                ).queue();
                event.getHook().editOriginalEmbeds().queue();
                RPGUser.newInfo(event.getUser().getIdLong());
                break;
            case "end":
                event.getHook().editOriginalEmbeds().queue();
                event.getHook().editOriginal("Ended your journey! Your soldier's life has been terminated ðŸ’€").setActionRow(
                        Button.primary("1234:BEGUN", "Journey has ended").asDisabled()
                ).queue();
                break;
            case "noMarry":
                EmbedBuilder embedBuilder = new EmbedBuilder();
                embedBuilder.setTitle("Pending Confirmation").setDescription(author.getAsMention() + " is proposing to you!\n" +
                        "**What is your answer?**");
                embedBuilder.setColor(Color.YELLOW);
                event.getHook().editOriginalEmbeds(embedBuilder.build()).setActionRow(
                        Button.success(author.getId() + ":noMarry:RIP", "No").asDisabled(),
                        Button.secondary(author.getId() + ":yesMarry:RIP", "Yes").asDisabled()
                ).queue();
                event.getChannel().sendMessage("OOF! REJECTED! *pat pat*").queue();
                event.deferEdit().queue();
                break;
            case "date":
                long wife = MarriageData.getWife(Long.parseLong(authorId));
                int pay = UtilNum.randomNum(100_000, 400_000);
                String message = "You went to a date with " + RPGDataUtils.getNameFromUser(wife) + " (" + Bot.jda.getUserById(wife).getName() + "). Making your partner happy!";
                event.getChannel().sendMessage(message + " You also paid " + RPGEmojis.credits + " " + RPGDataUtils.formatter.format(pay) + " for the dinner.").queue();
                MarriageCommand.makeEmbed(event.getMessage(), author, message);
                int randomNum = UtilNum.randomNum(10, 20);
                MarriageData.addHappiness(Long.parseLong(authorId), randomNum);
                MarriageData.addHappiness(wife, randomNum);
                randomNum = UtilNum.randomNum(1, 5);
                MarriageData.addXP(Long.parseLong(authorId), randomNum);
                MarriageData.addXP(wife, randomNum);
                DatabaseManager.INSTANCE.setCredits(Long.parseLong(authorId), -pay);
                break;
            case "hug":
                wife = MarriageData.getWife(Long.parseLong(authorId));
                message = "You gave " + RPGDataUtils.getNameFromUser(wife) + " (" + Bot.jda.getUserById(wife).getName() + ") a hug. Making your wife/husband love you more!";
                event.getChannel().sendMessage(message).queue();
                MarriageCommand.makeEmbed(event.getMessage(), author, message);
                randomNum = UtilNum.randomNum(1, 20);
                MarriageData.addLove(Long.parseLong(authorId), randomNum);
                MarriageData.addLove(wife, randomNum);
                randomNum = UtilNum.randomNum(1, 5);
                MarriageData.addXP(Long.parseLong(authorId), randomNum);
                MarriageData.addXP(wife, randomNum);
                break;
            case "fixHouse":
                wife = MarriageData.getWife(Long.parseLong(authorId));
                pay = UtilNum.randomNum(100_000, 300_000);
                message = "You hired someone to fix " + RPGDataUtils.getNameFromUser(wife) + " (" + Bot.jda.getUserById(wife).getName() + ") and your house. Making your house better!";
                event.getChannel().sendMessage(message + " You also paid " + RPGEmojis.credits + " " + RPGDataUtils.formatter.format(pay) + " for the worker.").queue();
                MarriageCommand.makeEmbed(event.getMessage(), author, message);
                randomNum = UtilNum.randomNum(20, 40);
                MarriageData.addHouseStatus(Long.parseLong(authorId), randomNum);
                MarriageData.addHouseStatus(wife, randomNum);
                randomNum = UtilNum.randomNum(1, 5);
                MarriageData.addHouseXP(Long.parseLong(authorId), randomNum);
                MarriageData.addHouseXP(wife, randomNum);
                DatabaseManager.INSTANCE.setCredits(Long.parseLong(authorId), -pay);
                break;
            case "yesAdopt":
                User father = event.getJDA().getUserById(id[2]);
                User son = author;
                embedBuilder = new EmbedBuilder();
                embedBuilder.setTitle("Pending Confirmation").setDescription(father.getAsMention() + " is ask for you to be his/her son!\n" +
                        "**What is your answer?**");
                embedBuilder.setColor(Color.YELLOW);
                event.getHook().editOriginalEmbeds(embedBuilder.build()).setActionRow(
                        Button.secondary(author.getId() + ":noMarry:RIP", "No").asDisabled(),
                        Button.success(author.getId() + ":yesMarry:RIP", "Yes").asDisabled()
                ).queue();
                MarriageData.adoptSon(father.getIdLong(), son.getIdLong());
                wife = MarriageData.getWife(father.getIdLong());
                MarriageData.adoptSon(wife, son.getIdLong());
                embedBuilder = new EmbedBuilder();
                embedBuilder.setTitle("Adopting").setColor(Color.PINK);
                embedBuilder.setDescription(father.getAsMention() + " and " + event.getJDA().getUserById(wife).getAsMention() +
                        " Congratulations for adopting " + son.getAsMention() + " as your son/daughter!");
                event.getChannel().sendMessageEmbeds(embedBuilder.build()).queue();
                break;
            case "yesMarry":
                embedBuilder = new EmbedBuilder();
                embedBuilder.setTitle("Pending Confirmation").setDescription(author.getAsMention() + " is proposing to you!\n" +
                        "**What is your answer?**");
                embedBuilder.setColor(Color.YELLOW);
                event.getHook().editOriginalEmbeds(embedBuilder.build()).setActionRow(
                        Button.secondary(author.getId() + ":noMarry:RIP", "No").asDisabled(),
                        Button.success(author.getId() + ":yesMarry:RIP", "Yes").asDisabled()
                ).queue();
                event.deferEdit().queue();
                User receiverOfRing = event.getJDA().getUserById(id[2]);
                User proposer = event.getUser();
                int i = UtilNum.randomNum(1, 100);
                int money = i * UtilNum.randomNum(5000, 30000);
                DatabaseManager.INSTANCE.setCredits(receiverOfRing.getIdLong(), money);
                DatabaseManager.INSTANCE.setCredits(proposer.getIdLong(), money);
                embedBuilder = new EmbedBuilder();
                embedBuilder.setTitle("Marriage").setColor(Color.PINK);
                embedBuilder.setDescription(proposer.getAsMention() + " and " + receiverOfRing.getAsMention() +
                        " I, " + event.getJDA().getSelfUser().getName() + ", pronounce you husband and wife. You may kiss now, or date, or whatever. " +
                        "For this special occasion, a total of " + i + " people sent each of you a grand total of " + RPGEmojis.credits + " " + RPGDataUtils.formatter.format(money) + "!\n\n" +
                        "**Once again, I say CONGRATULATIONS ðŸ¥³**");
                embedBuilder.setThumbnail("https://cdn.discordapp.com/emojis/862369027984064552.png");
                event.getChannel().sendMessageEmbeds(embedBuilder.build()).setActionRow(
                        Button.of(ButtonStyle.SECONDARY, "0000:marrydono:" + receiverOfRing.getId() + ":" + proposer.getId(), "Give 100,000 credits")
                ).queue();
                MarriageData.newInfo(receiverOfRing.getIdLong(), proposer.getIdLong());
                MarriageData.newInfo(proposer.getIdLong(), receiverOfRing.getIdLong());
                break;
            case "next":
                event.deferEdit().queue();

                int ids = Integer.parseInt(id[2]) + 1;

                event.getMessage().delete().queue();

                ShopCommand.buildEmbed(ids, event.getTextChannel(), event.getUser().getIdLong());
                break;
            case "previous":
                event.deferEdit().queue();

                ids = Integer.parseInt(id[2]) - 1;

                event.getMessage().delete().queue();

                ShopCommand.buildEmbed(ids, event.getTextChannel(), event.getUser().getIdLong());
                break;
            case "previousInv":
                event.deferEdit().queue();
                ArrayList<String> list = InventoryCommand.embedPaginatorMessage.get(event.getMessage().getIdLong());
                event.getMessage().delete().queue();
                int pageNumber = Integer.parseInt(id[2])-1;
                message = list.get(pageNumber);
                boolean disableNext = pageNumber == 0;
                embedBuilder = new EmbedBuilder().setColor(Color.BLACK).setTitle("Owned Items");
                embedBuilder.setAuthor(author.getName() + "'s inventory", null, author.getAvatarUrl());
                embedBuilder.setDescription(message);
                embedBuilder.setFooter("You can use 'ignt sell [item]' to sell an item. â”€ Page " + (pageNumber+1) + " of " + list.size());
                event.getTextChannel().sendMessageEmbeds(embedBuilder.build()).setActionRow(
                        Button.of(ButtonStyle.PRIMARY, author.getId() + ":previousInv:" + (pageNumber), Emoji.fromMarkdown("<:left:915425233215827968>")).withDisabled(disableNext),
                        Button.of(ButtonStyle.PRIMARY, author.getId() + ":nextInv:" + (pageNumber+1), Emoji.fromMarkdown("<:right:915425310592356382>"))
                ).queue(
                        (paginator -> {
                            InventoryCommand.embedPaginatorMessage.put(paginator.getIdLong(), list);
                        })
                );
                break;
            case "nextInv":
                event.deferEdit().queue();
                list = InventoryCommand.embedPaginatorMessage.get(event.getMessage().getIdLong());
                event.getMessage().delete().queue();
                pageNumber = Integer.parseInt(id[2]);
                message = list.get(pageNumber);
                disableNext = list.size() < pageNumber + 1;
                embedBuilder = new EmbedBuilder().setColor(Color.BLACK).setTitle("Owned Items");
                embedBuilder.setAuthor(author.getName() + "'s inventory", null, author.getAvatarUrl());
                embedBuilder.setDescription(message);
                embedBuilder.setFooter("You can use 'ignt sell [item]' to sell an item. â”€ Page " + (pageNumber+1) + " of " + list.size());
                event.getTextChannel().sendMessageEmbeds(embedBuilder.build()).setActionRow(
                        Button.of(ButtonStyle.PRIMARY, author.getId() + ":previousInv:" + (pageNumber), Emoji.fromMarkdown("<:left:915425233215827968>")),
                        Button.of(ButtonStyle.PRIMARY, author.getId() + ":nextInv:" + (pageNumber + 1), Emoji.fromMarkdown("<:right:915425310592356382>")).withDisabled(disableNext)
                ).queue(
                        (paginator -> {
                            InventoryCommand.embedPaginatorMessage.put(paginator.getIdLong(), list);
                        })
                );
        }
    }
}