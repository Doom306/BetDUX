package com.general_hello.commands.OtherEvents;

import com.general_hello.commands.Database.DatabaseManager;
import com.general_hello.commands.RPG.Commands.ShopCommand;
import com.general_hello.commands.RPG.Objects.RPGEmojis;
import com.general_hello.commands.RPG.RpgUser.RPGUser;
import com.general_hello.commands.commands.Utils.UtilNum;
import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.events.interaction.ButtonClickEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.components.Button;
import org.jetbrains.annotations.NotNull;

import java.awt.*;
import java.text.DecimalFormat;
import java.util.Objects;

public class OnRPGButtonClick extends ListenerAdapter {
    @Override
    public void onButtonClick(@NotNull ButtonClickEvent event) {
        // users can spoof this id so be careful what you do with this
        String[] id = event.getComponentId().split(":"); // this is the custom id we specified in our button
        String authorId = id[0];

        if (id.length == 1) {
            return;
        }

        String type = id[1];
        // When storing state like this is it is highly recommended to do some kind of verification that it was generated by you, for instance a signature or local cache

        if (!authorId.equals("0000") && !authorId.equals(event.getUser().getId())) {
            event.deferEdit().queue();
            return;
        }

        switch (type) {
            case "color":
                if (Objects.equals(id[2], "correct")) {
                    int minRobOrFine = 0;
                    int maxRobOrFine = 200_000;

                    int randomNum = UtilNum.randomNum(minRobOrFine, maxRobOrFine);

                    DecimalFormat formatter = new DecimalFormat("#,###.00");
                    DatabaseManager.INSTANCE.setCredits(event.getUser().getIdLong(), randomNum);

                    EmbedBuilder e = new EmbedBuilder();
                    e.setTitle("Great Work!");
                    e.setColor(Color.green);
                    e.setDescription("You were given " + RPGEmojis.credits + " `" + formatter.format(randomNum) + "` for an hour of work.");
                    e.setFooter("Working as a observer");
                    event.getHook().deleteOriginal().queue();
                    event.deferEdit().queue();
                    event.getChannel().sendMessageEmbeds(e.build()).setActionRow(Button.success("1234:IGNORE", event.getButton().getLabel()).asDisabled()).queue();
                } else {
                    int minRobOrFine = 0;
                    int maxRobOrFine = 100_000;

                    int randomNum = UtilNum.randomNum(minRobOrFine, maxRobOrFine);

                    DecimalFormat formatter = new DecimalFormat("#,###.00");
                    DatabaseManager.INSTANCE.setCredits(event.getUser().getIdLong(), randomNum);

                    EmbedBuilder e = new EmbedBuilder();
                    e.setTitle("TERRIBLE Work!");
                    e.setColor(Color.red);
                    e.setDescription("You lost the mini-game because the answer you chose wasn't correct.\n" +
                            "You were given " + RPGEmojis.credits + " `" + formatter.format(randomNum) + "` for a sub-par hour of work.");
                    e.setFooter("Working as a observer");
                    event.getHook().deleteOriginal().queue();
                    event.deferEdit().queue();
                    event.getChannel().sendMessageEmbeds(e.build()).setActionRow(Button.danger("1234:IGNORE", event.getButton().getLabel()).asDisabled()).queue();
                }
                break;
            case "start":
                //some other code
                event.getHook().editOriginal("Successfully started your journey! Good luck soldier!").setActionRow(
                        Button.primary("1234:BEGUN", "Journey has started").asDisabled()
                ).queue();
                event.getHook().editOriginalEmbeds().queue();
                RPGUser.newInfo(event.getUser().getIdLong());
                break;
            case "end":
                event.getHook().editOriginalEmbeds().queue();
                event.getHook().editOriginal("Ended your journey! Your soldier's life has been terminated ðŸ’€").setActionRow(
                        Button.primary("1234:BEGUN", "Journey has ended").asDisabled()
                ).queue();
                break;
            case "next":
                event.deferEdit().queue();

                int ids = Integer.parseInt(id[2]) + 1;

                event.getMessage().delete().queue();

                ShopCommand.buildEmbed(ids, event.getTextChannel(), event.getUser().getIdLong());
                break;
            case "previous":
                event.deferEdit().queue();

                ids = Integer.parseInt(id[2]) - 1;

                event.getMessage().delete().queue();

                ShopCommand.buildEmbed(ids, event.getTextChannel(), event.getUser().getIdLong());
                break;
        }
    }
}