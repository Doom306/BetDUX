package com.general_hello.commands.OtherEvents;

import com.general_hello.commands.Database.DataUtils;
import com.general_hello.commands.Objects.User.Player;
import net.dv8tion.jda.api.entities.User;
import net.dv8tion.jda.api.events.interaction.component.ButtonInteractionEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import org.jetbrains.annotations.NotNull;

import java.util.concurrent.TimeUnit;

public class OnButtonClick extends ListenerAdapter {
    @Override
    public void onButtonInteraction(@NotNull ButtonInteractionEvent event) {
        // users can spoof this id so be careful what you do with this
        String[] id = event.getComponentId().split(":"); // this is the custom id we specified in our button
        String authorId = id[0];

        if (id.length == 1) {
            return;
        }

        String type = id[1];
        // When storing state like this is it is highly recommended to do some kind of verification that it was generated by you, for instance a signature or local cache

        if (!authorId.equals("0000") && !authorId.equals(event.getUser().getId())) {
            event.reply("You can't press this button").setEphemeral(true).queue();
            return;
        }

        User author = event.getUser();

        switch (type) {
            case "sensei" -> {
                if (id[2].equals("yes")) {
                    Player player = DataUtils.getPlayer(event.getUser());
                    player.setSenseiId(author.getIdLong());
                    event.reply(author.getAsMention() + " is now your sensei.").queue((interactionHook -> {
                        interactionHook.deleteOriginal().queueAfter(3, TimeUnit.SECONDS);
                    }));
                    event.getMessage().delete().queueAfter(3, TimeUnit.SECONDS);
                } else {
                    event.reply(author.getAsMention() + " denied the request.").queue((interactionHook -> {
                        interactionHook.deleteOriginal().queueAfter(3, TimeUnit.SECONDS);
                    }));
                    event.getMessage().delete().queueAfter(3, TimeUnit.SECONDS);
                }
            }
        }
    }
}